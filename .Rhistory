git push
# include=false will not performance our codes and results in the html file; echo=false will only show our outputs such as tables and plots
# import libraries and data here
library(ggplot2)
library(dplyr)
library(naniar)
library(astsa)
library(forecast)
library(TTR)
library(KernSmooth)
library(tseries)
load("finalproject.Rdata")
gg_miss_var(finalPro_data)+
labs(caption = "Figure 1: Missing Plot")+
theme(plot.caption = element_text(size = 16,hjust=0.5))
# include=false will not performance our codes and results in the html file; echo=false will only show our outputs such as tables and plots
# import libraries and data here
library(ggplot2)
library(dplyr)
library(naniar)
library(astsa)
library(forecast)
library(TTR)
library(KernSmooth)
library(tseries)
load("finalproject.Rdata")
Exports<-ts(finalPro_data$Exports,start = 1960)
gg_miss_var(finalPro_data)+
labs(caption = "Figure 1: Missing Plot")+
theme(plot.caption = element_text(size = 16,hjust=0.5))
# Plot the Export as time series data
ts.plot(Exports,main = "Time series data")
acf2(Exports,max.lag=30)
gg_miss_var(finalPro_data)+
labs(caption = "Figure 1: Missing Plot")+
theme(plot.caption = element_text(size = 16,hjust=0.5))
sig_value <- 0.05 #significant value of test
# ADF: if p < sig, stationary
adf.test(Exports)$p.value
#KPSS: if p > sig, stationary
kpss.test(Exports)$p.value
# Both tests indicate non-stationary.
#Try kernal smoothing for trend
kernel.type <- "gaussian"
bandwidth <- dpill(time(Exports), Exports)
smoothed_values <- ksmooth(x=time(Exports),y=Exports,kernel='normal',bandwidth = bandwidth,n.points = length(Exports))
plot(Exports,col='red')
lines(smoothed_values$x, smoothed_values$y,col='blue')
#zhuorui note: overfitting?
# Remove the Trend-cycle effect
#Exports.noTrend<-Exports-T.t
Exports.noTrend <- Exports - smoothed_values$y
plot(Exports.noTrend)
# Take the 1st-order difference and test if the data is stationary
Exports.diff<-diff(Exports)
acf2(Exports.diff,max.lag= 30)
#suggesting AR(2), MA(1)
# Box=Cox transformation
lambda<-BoxCox.lambda(Exports)
Exports.Box<-BoxCox(Exports,lambda)
#ts.plot(Exports.Box,main = "Time series data after Box-Cox")
acf2(diff(Exports.Box),max.lag = 30)
# suggesting AR(1), MA(1)
# Take the 1st-order difference and test if the data is stationary
Exports.log<-log(Exports)
acf2(Exports.log,max.lag= 30)
acf2((diff(Exports.log)),max.lag= 30)
#suggesting AR(2) MA(1)
#auto selection
Exports.auto <- auto.arima(Exports)
Exports.noTrend.auto <- auto.arima(Exports.noTrend)
#use SARIMA to determent the performance, acf of residual all need to be in range, p-value needs to be greater than 0.1, QQ lines close to the line.
sarima(Exports.Box, 2,0,1, no.constant=TRUE)
#use SARIMA to determent the performance, acf of residual all need to be in range, p-value needs to be greater than 0.1, QQ lines close to the line.
sarima(Exports.Box, 2,0,1, no.constant=TRUE)
sarima(Exports, 2,0,1, no.constant=TRUE)
# Box-Cox transformation
lambda<-BoxCox.lambda(Exports)
Exports.Box<-BoxCox(Exports,lambda)
acf2(Exports.Box,max.lag = 30)
#ts.plot(Exports.Box,main = "Time series data after Box-Cox")
acf2(diff(Exports.Box),max.lag = 30)
# suggesting white noise, so discard this transformation
#use SARIMA to determent the performance, acf of residual all need to be in range, p-value needs to be greater than 0.1, QQ lines close to the line.
sarima(Exports.diff, 2,0,1, no.constant=TRUE)
#use SARIMA to determent the performance, acf of residual all need to be in range, p-value needs to be greater than 0.1, QQ lines close to the line.
fit1<-sarima(Exports.noTrend, 2,0,1, no.constant=TRUE)
summary(fit1)
?sample
# Set up training and validation set to prevent possible overfitting problem
train.index<-sample(length(Exports.noTrend),size=floor(length(Exports.noTrend*0.8)))
Exports.train<-
# Set up training and validation set to prevent possible overfitting problem
train.index<-sample(length(Exports.noTrend),size=floor(length(Exports.noTrend*0.8)))
Exports.train<-Exports.noTrend[train.index]
Exports.valid<-Exports.noTrend[-train.index]
# Set up training and validation set to prevent possible overfitting problem
t<-floor(58*0.8)
Exports.train<-Exports.noTrend[1:t]
Exports.valid<-Exports.noTrend[t:58]
# Set up training and validation set to prevent possible overfitting problem
t<-floor(58*0.8)
Exports.train<-Exports.noTrend[1:t]
Exports.valid<-Exports.noTrend[t:58]
#auto selection
Exports.train.auto <- auto.arima(Exports.noTrend)
#auto selection
Exports.train.auto <- auto.arima(Exports.noTrend)
summary(Exports.train.auto)
View(fit1)
?sarima
#use SARIMA to determent the performance, acf of residual all need to be in range, p-value needs to be greater than 0.1, QQ lines close to the line.
fit1<-sarima(Exports.train.auto, 2,0,1, no.constant=TRUE)
#use SARIMA to determent the performance, acf of residual all need to be in range, p-value needs to be greater than 0.1, QQ lines close to the line.
fit1<-sarima(Exports.train, 2,0,1, no.constant=TRUE)
summary(fit1)
#auto selection
Exports.noTrend.auto <- auto.arima(Exports.noTrend)
summary(Exports.noTrend.auto)
#use SARIMA to determent the performance, acf of residual all need to be in range, p-value needs to be greater than 0.1, QQ lines close to the line.
fit1<-sarima(Exports.noTrend, 2,0,1, no.constant=TRUE)
summary(fit1)
fit2<-sarima(Exports.noTrend, 2,1,1, no.constant=TRUE)
summary(fit2)
fit3<-sarima(Exports.noTrend, 2,0,2, no.constant=TRUE)
summary(fit3)
fit3<-sarima(Exports.noTrend, 1,0,1, no.constant=TRUE)
summary(fit3)
fit3<-sarima(Exports.noTrend, 2,0,1, no.constant=TRUE)
summary(fit3)
fit3<-sarima(Exports.noTrend, 4,0,2, no.constant=TRUE)
summary(fit3)
fit3<-sarima(Exports.noTrend, 1,0,2, no.constant=TRUE)
summary(fit3)
fit3<-sarima(Exports.noTrend, 3,0,1, no.constant=TRUE)
summary(fit3)
?sarima
View(fit1)
#use SARIMA to determent the performance, acf of residual all need to be in range, p-value needs to be greater than 0.1, QQ lines close to the line.
fit1<-sarima(Exports.noTrend, 2,0,1, no.constant=TRUE)
summary(fit1)
MSE1<-sum(fit1$fit$residuals)/58
print(paste(c("Training MSE:",MSE1)))
fit2<-sarima(Exports.noTrend, 2,1,1, no.constant=TRUE)
summary(fit2)
MSE2<-sum(fit2$fit$residuals)/58
print(paste(c("Training MSE:",MSE2)))
fit3<-sarima(Exports.noTrend, 3,0,1, no.constant=TRUE)
summary(fit3)
MSE3<-sum(fit3$fit$residuals)/58
print(paste(c("Training MSE:",MSE3)))
